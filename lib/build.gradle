/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // JavaCC compiler helper
    id "ca.coglinc.javacc" version "2.4.0"
    id "org.sonarqube" version "3.3"
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.goodudetheboy'
archivesBaseName = 'WorldHolidayDates'
version = '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport

sonarqube {
    properties {
        property "sonar.java.source","1.8"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.projectName", "WorldHolidayDates"
        property "sonar.projectKey", "goodudetheboy_WorldHolidayDates"
        property "sonar.organization", "goodudetheboy"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", "true"
    }
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // JSON parser
    implementation 'com.google.code.gson:gson:2.8.7'

    // https://mvnrepository.com/artifact/net.java.dev.javacc/javacc
    implementation 'net.java.dev.javacc:javacc:7.0.10'

    // Time4J
    implementation 'net.time4j:time4j-base:5.8'

    // ThreeTen extra
    implementation 'org.threeten:threeten-extra:1.7.0'
}


ext {
    javaccOutput = file(project.buildDir.absolutePath + '/generated/javacc/')
    javaccSourcePath = project.buildDir.absolutePath + '/generated/javacc/'
    javaccSource = file(javaccSourcePath)
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

compileJavacc {
    inputDirectory = mainSource
    outputDirectory = javaccOutput
}

compileJava {
    source javaccSource,mainSource
}

compileTestJava {
    source javaccSource,mainSource,testSource
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'WorldHolidayDates fat jar',
        'Implementation-Version': "${project.version}"
    }
    baseName = project.archivesBaseName + '-all'
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task collectDates(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = "io.github.goodudetheboy.worldholidaydates.holidayparser.DataCollector"
}

ext {
    repoUrl = 'https://github.com/goodudetheboy/WorldHolidayDates.git'
    spdxId = 'MIT'
}

publishing {
    publications {
        Release(MavenPublication) {
            groupId 'io.github.goodudetheboy'
            artifactId 'WorldHolidayDates'
            from components.java
            pom {
                name = artifactId
                description = 'Holiday data of 168 countries in the world!'    
                url = 'https://github.com/goodudetheboy/WorldHolidayDates'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://github.com/goodudetheboy/WorldHolidayDates/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        name = 'Vuong Ho'
                    }
                }
            }
            repositories {
                maven {
                    name = 'sonatype'
                    credentials {
                        username System.getenv('ossrhUsername')
                        password System.getenv('ossrhPassword')
                    }
                    def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

signing {
    sign publishing.publications.Release
}
